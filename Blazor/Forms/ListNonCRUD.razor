@*@page "/forms"*@
@*@page "/forms/list"*@
@*@layout EmptyLayout*@


<h5 class="bg-primary text-white text-center p-2">People</h5>


<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Dept</th>
            <th>Location</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (People.Count() == 0)
        {
            <tr><th colspan="5" class="p-4 text-center">Loading Data...</th></tr>
        }
        else
        {
            @foreach (Person p in People)
            {
                <tr>
                    <td>@p.PersonId</td>
                    <td>@p.Surname, @p.Firstname</td>
                    <td>@p.Department.Name</td>
                    <td>@p.Location.City</td>
                    <td>
                        <NavLink class="btn btn-sm btn-warning" href="@GetEditUrl(p.PersonId)">
                                Edit
                        </NavLink>  <!--commented out to demonstrate the Update button-->
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@*<button class="btn btn-danger" @onclick="UpdateData">Update</button>*@
<button class="btn btn-danger" @onclick="@(() => UpdateData())">Update</button>
<button class="btn btn-info" @onclick="SortWithQuery">Sort (With Query)</button>
<button class="btn btn-info" @onclick="SortWithoutQuery">Sort (No Query)</button>

<!-- #region Example where EF submits requests each time the button is pressed -->
<button class="btn btn-primary" @onclick="@(() => Counter++)">Increment</button>
<span class="h5">Counter: @Counter</span>
<!-- #endregion -->



@code {
    [Inject]
    public DataContext Context { get; set; }

    public IEnumerable<Person> People { get; set; } = Enumerable.Empty<Person>();

    #region Commented out to use the Update button
    //protected override void OnInitialized()
    //{
    //    People = Context.People.Include(p => p.Department).Include(p => p.Location);
    //}

    //string GetEditUrl(long id) => $"/forms/edit/{id}";
    #endregion

    public int Counter { get; set; } = 0;

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }
    //private async Task UpdateData() => People = await Context.People.Include(p => p.Department)
    //                                                                 .Include(p => p.Location)
    //                                                                 .ToListAsync<Person>();

    private IQueryable<Person> Query => Context.People.Include(p => p.Department).Include(p => p.Location);

    private async Task UpdateData(IQueryable<Person> query = null) => People = await (query ?? Query).ToListAsync<Person>();

    public async Task SortWithQuery()
    {
        await UpdateData(Query.OrderBy(p => p.Surname));
    }

    public void SortWithoutQuery()
    {
        People = People.OrderBy(p => p.Firstname).ToList<Person>();
    }

    string GetEditUrl(long id) => $"/forms/edit/{id}";

}
