@inherits LayoutComponentBase
@using Advanced.Services

<div class="container-fluid">
    <div class="row">
        <div class="col-3">
            @foreach (string key in NavLinks.Keys)
            {
                #region Nav links that only have one path associated with them
                @*<NavLink class="btn btn-outline-primary btn-block"
                             href="@NavLinks[key]"
                             ActiveClass="btn-primary text-white"
                             Match="NavLinkMatch.Prefix">
                        @key
                    </NavLink>*@
                #endregion
                <MultiNavLink class="btn btn-outline-primary btn-block"
                              href="@NavLinks[key]"
                              ActiveClass="btn-primary text-white"
                              DisabledClasses="btn btn-dark text-light btn-block disabled"
                              @ref="Refs[key]">
                    @key
                </MultiNavLink>
            }
            <button class="btn btn-secondary btn-block mt-5 " @onclick="ToggleLinks">
                Toggle Links
            </button>
        </div>
        <div class="col">
            @Body
        </div>
    </div>
</div>


@code {

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public ToggleService Toggler { get; set; }

    #region Nav links that only have one path associated with them
    //public Dictionary<string, string> NavLinks = new Dictionary<string, string> {
    //        {"People", "/people" },
    //        {"Departments", "/depts" },
    //        {"Details", "/person" }
    //    };
    #endregion


    #region This applies multiple URL paths to each nav link
    public Dictionary<string, string[]> NavLinks = new Dictionary<string, string[]> {
        {"People", new string[] {"/people", "/" } },
        {"Departments", new string[] {"/depts", "/departments" } },
        {"Details", new string[] { "/person" } }
    };
    #endregion

    public Dictionary<string, MultiNavLink> Refs = new Dictionary<string, MultiNavLink>();

    #region commented out so javascript method (createToggleButton) after the content has been rendered
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        Toggler.EnrolComponents(Refs.Values);
    //    }
    //} 

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Toggler.EnrolComponents(Refs.Values);
            //await JSRuntime.InvokeVoidAsync("createToggleButton");   //this commented out so Javascript could invoke this method
            await JSRuntime.InvokeVoidAsync("createToggleButton", DotNetObjectReference.Create(Toggler)); //this passes a reference to the javascript method
        }
    }
    #endregion

    #region Before adding calls to methods in this blazor component from C# code
    //private bool LinksEnabled = true;
    //public void ToggleLinks()
    //{
    //    LinksEnabled = !LinksEnabled;
    //    foreach (MultiNavLink link in Refs.Values)
    //    {
    //        link.SetEnabled(LinksEnabled);
    //    }
    //} 
    #endregion

    public void ToggleLinks()
    {
        Toggler.ToggleComponents();
    }
}

